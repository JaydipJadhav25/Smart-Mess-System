import React from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, CartesianGrid } from 'recharts';
import { FiUsers, FiStar, FiThumbsUp, FiThumbsDown, FiAlertTriangle } from 'react-icons/fi';

// --- Type Definition for the AI Analysis Data ---
// This interface matches the JSON structure you provided.
interface MealPerformance {
  name: string;
  averageRating: number;
  comments?: string[];
  negativeComments?: string[];
}

interface AnalyticsData {
  summary: {
    totalFeedbacks: number;
    averageRating: number;
  };
  positiveFeedbacks: { count: number };
  negativeFeedbacks: { count: number };
  spammingUsers: {
    count: number;
    list: string[];
  };
  mostPositiveMeals: {
    count: number;
    meals: MealPerformance[];
  };
  mostNegativeMeals: {
    count: number;
    meals: MealPerformance[];
  };
  sentimentDistribution: {
    "1_star": number;
    "2_star": number;
    "3_star": number;
    "4_star": number;
    "5_star": number;
  };
  mealAnalysis: Array<{
    meal: string;
    averageRating: number;
    positiveComments: string[];
    negativeComments: string[];
  }>;
  aiSuggestions: {
    goodPoints: string[];
    badPoints: string[];
  };
  aiSummaryText: string;
}

// --- Helper Component for Stat Cards ---
const StatCard: React.FC<{ icon: React.ReactNode; title: string; value: string | number; color: string }> = ({ icon, title, value, color }) => (
  <div className="bg-white p-6 rounded-lg shadow-md flex items-center gap-4">
    <div className={`text-3xl p-3 rounded-full ${color}`}>
      {icon}
    </div>
    <div>
      <p className="text-gray-500 text-sm">{title}</p>
      <p className="text-2xl font-bold text-gray-800">{value}</p>
    </div>
  </div>
);


const AnalyticsDashboard: React.FC<{ analysisData: AnalyticsData }> = ({ analysisData }) => {
  
  // Transform sentiment data for the bar chart
  const sentimentChartData = Object.entries(analysisData.sentimentDistribution).map(([key, value]) => ({
    name: `${key.split('_')[0]} Star`,
    count: value,
  }));

  return (
    <div className="font-sans bg-gray-50 min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        
        {/* --- Header --- */}
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-slate-800">Feedback Analysis Report</h1>
          <p className="text-gray-600 mt-1">An AI-generated overview of user feedback.</p>
        </header>

        {/* --- Top-Level Stat Cards --- */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatCard icon={<FiUsers />} title="Total Feedbacks" value={analysisData.summary.totalFeedbacks} color="bg-blue-100 text-blue-600" />
          <StatCard icon={<FiStar />} title="Average Rating" value={analysisData.summary.averageRating.toFixed(2)} color="bg-yellow-100 text-yellow-600" />
          <StatCard icon={<FiThumbsUp />} title="Positive Feedbacks" value={analysisData.positiveFeedbacks.count} color="bg-green-100 text-green-600" />
          <StatCard icon={<FiThumbsDown />} title="Negative Feedbacks" value={analysisData.negativeFeedbacks.count} color="bg-red-100 text-red-600" />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* --- Main Content (Left Column) --- */}
          <main className="lg:col-span-2 space-y-8">
            
            {/* --- Sentiment Distribution Chart --- */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Sentiment Distribution</h2>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={sentimentChartData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" vertical={false} />
                  <XAxis dataKey="name" tick={{ fill: '#6b7280' }} />
                  <YAxis tick={{ fill: '#6b7280' }} />
                  <Tooltip cursor={{fill: 'rgba(243, 244, 246, 0.5)'}} contentStyle={{ backgroundColor: '#fff', border: '1px solid #ddd', borderRadius: '0.5rem' }} />
                  <Legend />
                  <Bar dataKey="count" fill="#3b82f6" name="Feedback Count" barSize={40} />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* --- Meal Performance Table --- */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Meal Performance Breakdown</h2>
              <div className="overflow-x-auto">
                <table className="w-full text-left">
                  <thead className="border-b bg-gray-50">
                    <tr>
                      <th className="p-4 text-sm font-semibold text-gray-600">Meal</th>
                      <th className="p-4 text-sm font-semibold text-gray-600">Average Rating</th>
                      <th className="p-4 text-sm font-semibold text-gray-600 text-center">Positive Comments</th>
                      <th className="p-4 text-sm font-semibold text-gray-600 text-center">Negative Comments</th>
                    </tr>
                  </thead>
                  <tbody>
                    {analysisData.mealAnalysis.map((item, index) => (
                      <tr key={index} className="border-b hover:bg-gray-50">
                        <td className="p-4 font-medium text-gray-900">{item.meal}</td>
                        <td className="p-4">
                          <div className="flex items-center gap-2">
                            <span className="font-bold">{item.averageRating.toFixed(2)}</span>
                            <div className="w-24 bg-gray-200 rounded-full h-2.5">
                              <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: `${(item.averageRating / 5) * 100}%` }}></div>
                            </div>
                          </div>
                        </td>
                        <td className="p-4 text-center text-green-600 font-semibold">{item.positiveComments.length}</td>
                        <td className="p-4 text-center text-red-600 font-semibold">{item.negativeComments.length}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </main>

          {/* --- Sidebar (Right Column) --- */}
          <aside className="lg:col-span-1 space-y-8">
            
            {/* --- AI Summary --- */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-bold text-gray-800 mb-2">ðŸ§  AI Executive Summary</h2>
              <p className="text-gray-600 italic">{analysisData.aiSummaryText}</p>
            </div>
            
            {/* --- AI Suggestions --- */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-bold text-gray-800 mb-4">AI Suggestions</h2>
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold text-green-700 mb-2 flex items-center gap-2"><FiThumbsUp />What's Going Well</h3>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {analysisData.aiSuggestions.goodPoints.map((point, i) => <li key={i}>{point}</li>)}
                  </ul>
                </div>
                <div>
                  <h3 className="font-semibold text-red-700 mb-2 flex items-center gap-2"><FiThumbsDown />Areas for Improvement</h3>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {analysisData.aiSuggestions.badPoints.map((point, i) => <li key={i}>{point}</li>)}
                  </ul>
                </div>
              </div>
            </div>
            
            {/* --- Spamming Users --- */}
            {analysisData.spammingUsers.count > 0 && (
              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-orange-400">
                <h2 className="text-xl font-bold text-gray-800 mb-2 flex items-center gap-2"><FiAlertTriangle className="text-orange-500" />Potential Spamming Users</h2>
                <p className="text-gray-600 mb-3">The following users submitted 2 or more feedback entries in the selected period:</p>
                <div className="flex flex-wrap gap-2">
                  {analysisData.spammingUsers.list.map((user, i) => (
                    <span key={i} className="bg-orange-100 text-orange-800 text-sm font-medium px-2.5 py-0.5 rounded-full">{user}</span>
                  ))}
                </div>
              </div>
            )}
          </aside>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsDashboard;